development:
  # secret_key_base=: "fe79cefee81121d60b5713a163da9a95fe9c53fdf47c64825db3c1dca1a595e30e57f6f8f91c1852aea15d74e2615b62e846ce8bc5714c721fef9f80e9b9858c"
  salt: XJ\ag\x84\x1F$\a\xE0\x13\x18\e`e\t~\xE2\x14\xFD\xEE\xFB{b\v;\xE4\"\xF9n\xF9\xDD~j\x03\x04\xD7 j\xF6\xB2\xF1Z\xA5\xC8\xA8mKg\xDE:\xC5\x02\xAA$(rom<D\x80\xC1\xEC\xF8
  key_en: \xF2\xFE\xD8?\xE5\xDE\xE0\xB8G*<\x0E\xF0$$\xA4\xEEP\x16\xEE\xFAa\xCD,\xA8hvugJ\x00\xF3\xF06\xE4\\\xCF\xF4D\xD4v;\xFB\xDA+v~=H\x95\xCF*\xC83\xACU\xE8s&\xD1\xBE\xFBCT


# Note:
# salt = SecureRandom.random_bytes(64) # Some value. Copy then save
# key = ActiveSupport::KeyGenerator.new('password').generate_key(salt) # Some value. Copy then save